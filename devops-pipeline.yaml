name: $(date:yyyyMMdd)$(rev:.rr)

stages:
  - stage: 'build'
    condition: succeeded() 
    displayName: 'build-mvc'
    jobs:
      - job:
        condition: succeeded()
        displayName: 'build-process'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: UseDotNet@2
            displayName: 'dotnet installer'
            inputs:
              version: '2.0'
          - script: |
              dotnet build

  - stage: 'test'
    condition: succeeded() 
    dependsOn: build
    displayName: 'test-mvc'
    jobs:
      - job:
        condition: succeeded()
        displayName: 'test-process'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - script: |
              dotnet install --global dotnet-sonarscanner
              dotnet sonarscanner begin /k:"testingdevops" /o:"Celestino Jones" /d:sonar.login="8f583409ecdc4227ebe9277455d564dc9a3a66b7" /d:sonar.host.url="https://sonarcloud.io"
              dotnet build
              dotnet test -p:CollectCoverage=true
              dotnet sonarscanner end /d:sonar.login="8f583409ecdc4227ebe9277455d564dc9a3a66b7" 

  - stage: 'pack'
    condition: succeeded() 
    dependsOn: test
    displayName: 'pack-mvc'
    jobs:
      - job:
        condition: succeeded()
        displayName: 'pack-process'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - script: |
              docker

  - stage: 'deploy'
    condition: succeeded() 
    displayName: 'deploy-mvc'
    jobs:
      - job:
        condition: succeeded()
        displayName: 'deploy-process'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - script: |
              echo 'working on i...'

trigger:
  branches:
    include:
      - master

variables:
  sonar: '8f583409ecdc4227ebe9277455d564dc9a3a66b7'